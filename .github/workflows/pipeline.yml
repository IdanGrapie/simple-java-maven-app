name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Check out the code
      uses: actions/checkout@v3
      with:
        fetch-depth: '0'  # Ensures all history and tags are fetched

    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'

    - name: Generate new tag
      id: newtag
      run: |
        # Fetch all tags
        git fetch --tags
        
        # Get the highest tag number, and add 1 to it.
        # This assumes tag names are in the format vMAJOR.MINOR.PATCH
        TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
        TAG="${TAG#V}" # Remove the 'v' prefix
        IFS='.' read -ra VERSION <<< "$TAG" # Split into an array
        VERSION[2]=$((VERSION[2]+1)) # Increment the patch version
        NEW_TAG="v${VERSION[0]}.${VERSION[1]}.${VERSION[2]}"
        echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
        echo "::set-output name=tag::$NEW_TAG"

    - name: Set the project version
      run: |
        mvn versions:set -DnewVersion=${{ steps.newtag.outputs.tag }} -DgenerateBackupPoms=false

    - name: Build with Maven
      run: mvn clean package

    - name: Upload JAR file as an artifact
      uses: actions/upload-artifact@v2
      with:
        name: my-app-jar
        path: target/*.jar

    - name: Build Docker image
      run: |
        docker build -t idan5567/github:${{ env.NEW_TAG }} .

    - name: Log in to Docker registry
      run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

    - name: Push Docker image
      run: |
        docker push idan5567/github:${{ env.NEW_TAG }}

    - name: Push new tag to GitHub
      run: |
        git tag ${{ steps.newtag.outputs.tag }}
        git push origin ${{ steps.newtag.outputs.tag }}


